/*!bits.scss*/
/******************
Colors
*******************/

$gry: #666666;
$gry2: #777777;
$ltGry1: #CCCCCC;
$ltGry2: #DDDDDD;
$ltGry3: #E8E8E8;
$drkGry: #555555;
$drkGry2: #999999;
$yellow: #F8BA00;
$twitterBlue: #57ADEA;
$facebookBlue: #4965A0;
$donateBlue: #54B6EF;
/******************
Breakpoints
*******************/
$breakpoints: (
  'xs-small': 464px,
  'x-small': 520px,
  'small'  : 767px,
  'mobile': 992px,//935px,
  'mobile-920': 920px,
  
  'sm-screen' : 1200px//992px,
 // 'large'  : 1200px,
);
 
@mixin respond-to-max($breakpoint) {
  // Retrieves the value from the key
  $value: map-get($breakpoints, $breakpoint);

  // If the key exists in the map
  @if $value != null {
    // Prints a media query based on the value
    @media (max-width: $value) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin respond-to-min($breakpoint) {
  // Retrieves the value from the key
  $value: map-get($breakpoints, $breakpoint);

  // If the key exists in the map
  @if $value != null {
    // Prints a media query based on the value
    @media (min-width: $value) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}
/*
@include respond-to(small) { ... }
@include respond-to(medium) { ... }
@include respond-to(large) { ... }
*/